[tool.poetry]
name = "dapla-toolbelt"
version = "2.0.0"
description = "Dapla Toolbelt"
authors = ["Dapla Developers <dapla-platform-developers@ssb.no>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/statisticsnorway/dapla-toolbelt"
repository = "https://github.com/statisticsnorway/dapla-toolbelt"
documentation = "https://statisticsnorway.github.io/dapla-toolbelt"
packages = [{ include = "dapla", from = "src" }]
classifiers = ["Development Status :: 5 - Production/Stable"]

[tool.poetry.urls]
Changelog = "https://github.com/statisticsnorway/dapla-toolbelt/releases"

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
click = ">=8.0.1"
types-requests = ">=2.28.11"
requests = ">=2.27.1"
pyarrow = ">=8.0.0"
pydantic = ">=1.9.1"
pandas = ">=1.4.2"
gcsfs = ">=2022.7.1"
lxml = ">=4.9.1"
ipython = ">=8.10.0"
jupyterhub = ">=3.0.0"
google-cloud-storage = ">=2.7.0"
pyjwt = ">=2.6.0"
google-cloud-pubsub = ">=2.14.1"
pyarrow-stubs = ">=10.0.1.7"
google-auth-stubs = ">=0.2.0" # Not maintained by Google, should change if Google releases their own stubs
pandas-stubs = ">=2.1.4"
types-google-cloud-ndb = ">=2.2.0"

[tool.poetry.group.dev.dependencies]
pygments = ">=2.10.0"
black = { extras = ["jupyter"], version = ">=23.1.0" }
coverage = { extras = ["toml"], version = ">=6.2" }
darglint = ">=1.8.1"
furo = ">=2021.11.12"
pre-commit = ">=2.16.0"
pre-commit-hooks = ">=4.1.0"
ruff = ">=0.0.284"
sphinx = ">=6.2.1"
sphinx-autobuild = ">=2021.3.14"
sphinx-autodoc-typehints = ">=1.24.0"
sphinx-click = ">=3.0.2"
typeguard = ">=2.13.3"
xdoctest = { extras = ["colors"], version = ">=0.15.10" }
myst-parser = { version = ">=0.16.1" }
jupyterlab = ">=3.4.5"
ipykernel = ">=6.13.0"
mypy = ">=0.950"
pytest = ">=7.1.2"
responses = ">=0.24.0"

[tool.pytest.ini_options]
pythonpath = ["src"]

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["dapla", "tests"]

[tool.coverage.report]
show_missing = true
fail_under = 50

[tool.mypy]
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_context = true

[[tool.mypy.overrides]]
# Allow missing type hints in third-party libraries without type information.
module = [
    "gcsfs.*",
    "jupyterhub.*",
    "fsspec.*",
    "responses.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "tests.*"
]
disallow_untyped_decorators = false

[tool.ruff]
force-exclude = true  # Apply excludes to pre-commit
show-fixes = true
src = ["src", "tests"]
target-version = "py39"  # Minimum Python version supported

# Ruff rules may be customized as desired: https://docs.astral.sh/ruff/rules/
select = [
    "A",    # prevent using keywords that clobber python builtins
    "B",    # bugbear: security warnings
    "D",    # documentation
    "E",    # pycodestyle
    "F",    # pyflakes
    "ISC",  # implicit string concatenation
    "I",    # sort imports
    "UP",   # alert you when better syntax is available in your python version
    "RUF",  # the ruff developer's own rules
]
ignore = [
    "ANN101", # Supress missing-type-self.
    "D100",   # Supress undocumented-public-module. Only doc of public api required.
    "E402",   # Supress module-import-not-at-top-of-file, needed in jupyter notebooks.
    "E501",   # Supress line-too-long warnings: trust black's judgement on this one.
    "UP007",  # ADDED MANUALLY - makes it possible to use the Optional[] syntax
]
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
extend-exclude = [
    "__pycache__",
    "old",
    ".ipynb_checkpoints",
    "noxfile.py",
    "docs/conf.py",
]

[tool.ruff.isort]
force-single-line = true

[tool.ruff.mccabe]
max-complexity = 15


[tool.ruff.pydocstyle]
convention = "google"  # You can also use "numpy".

[tool.ruff.pep8-naming]
classmethod-decorators = ["classmethod", "validator", "root_validator", "pydantic.validator"]

[tool.ruff.per-file-ignores]
"*/__init__.py" = ["F401"]
"**/tests/*" = [
    # asserts are encouraged in pytest
    "S101",
    # return annotations don't add value for test functions
    "ANN201",
    # docstrings are overkill for test functions
    "D103",
    "D101",
    "D102",
    "D100",
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
